
// 60008060093d393df3 => Contract Creation bytecode

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

/* Storage Slots */
#define constant NUMBER_OF_HORSES_LOCATION = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xE0
    shr
    // 60058060093d393df3
    // 5f3560e01c => FunctionSelector
    // [FunctionSelector]

    // Update => 0xcdfead2e
    // Read => 0xe026c017

    // updateHorseNumber function selector
    dup1                // [FunctionSelector, FunctionSelector]
    __FUNC_SIG(updateHorseNumber)         // [0xcdfead2e, FunctionSelector,FunctionSelector] => eq compare these two and return (1) if equals or else (0)
    eq                  // [true_if_funcSelector_matches, FunctionSelector] => [1]

    // Jump to updateHorseNumber function if true
    updateJump          // [updateHorseNumberProgramCounter, true/false]
    jumpi               // if true then jumpi executes => [FunctionSelector]
    __FUNC_SIG(readNumberOfHorses)
                                    // readNumberOfHorses function selector, 0xe026c017
                                    // [0xe026c017, FunctionSelector]
    eq                  // [true_if_funcSelector_matches, FunctionSelector] => [1]

    // Jump to readNumberOfHorses function if true
    readJump          // [readNumberOfHorsesProgramCounter, true/false]
    jumpi              // if true then jumpi executes => []

    0x00 0x00 revert   //[0, 0] => []

    updateJump:
        SET_NUMBER_OF_HORSES()

    readJump:
        GET_NUMBER_OF_HORSES()

    // 60108060093d393df35f3560e01c63cdfead2e1461000f575b
    //                   5f3560e01c63cdfead2e1461000f575b => Runtime bytecode
}


// 0xcdfead2e00000000000000000000000000000000000000000000000000000007 => Calldata
#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {

    0x04                    // [0x04] its the offset , Start loading from byte 0x04, because thatâ€™s where my actual argument begins.
    calldataload            // [argument_value]

    [NUMBER_OF_HORSES_LOCATION] // [storage_slot, argument_value]

    sstore  // pops: storage_slot and argument_value
    stop    // Stops the execution does not revert.
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    // 2. Load the value of that slot to memory
    // 3. Return the value form the memory

    [NUMBER_OF_HORSES_LOCATION]  // [key] => index of the slot
    sload                        // [value] => value fo the slot at index
    0x00                         // [0x00, value] => offset as 0x00 . where are memory should the value be stored
    mstore                       // []         | Memory: [value]

    0x20                         // Size of the value | 0x20 = 32 bytes
    0x00                         // Offset , the location of the value in memory to return
    return                       // Return the value from the memory at the offset
}